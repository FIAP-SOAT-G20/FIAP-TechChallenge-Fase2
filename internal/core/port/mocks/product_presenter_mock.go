// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/product_presenter_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/product_presenter_port.go -destination=internal/core/port/mocks/product_presenter_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	dto "github.com/FIAP-SOAT-G20/FIAP-TechChallenge-Fase2/internal/adapters/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockProductPresenter is a mock of ProductPresenter interface.
type MockProductPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockProductPresenterMockRecorder
}

// MockProductPresenterMockRecorder is the mock recorder for MockProductPresenter.
type MockProductPresenterMockRecorder struct {
	mock *MockProductPresenter
}

// NewMockProductPresenter creates a new mock instance.
func NewMockProductPresenter(ctrl *gomock.Controller) *MockProductPresenter {
	mock := &MockProductPresenter{ctrl: ctrl}
	mock.recorder = &MockProductPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductPresenter) EXPECT() *MockProductPresenterMockRecorder {
	return m.recorder
}

// Present mocks base method.
func (m *MockProductPresenter) Present(pp dto.ProductPresenterDTO) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Present", pp)
}

// Present indicates an expected call of Present.
func (mr *MockProductPresenterMockRecorder) Present(pp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Present", reflect.TypeOf((*MockProductPresenter)(nil).Present), pp)
}

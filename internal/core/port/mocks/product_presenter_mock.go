// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/product_presenter_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/product_presenter_port.go -destination=internal/core/port/mocks/product_presenter_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"
	entity "tech-challenge-2-app-example/internal/core/domain/entity"
	usecase "tech-challenge-2-app-example/internal/core/usecase"

	gomock "go.uber.org/mock/gomock"
)

// MockProductPresenter is a mock of ProductPresenter interface.
type MockProductPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockProductPresenterMockRecorder
	isgomock struct{}
}

// MockProductPresenterMockRecorder is the mock recorder for MockProductPresenter.
type MockProductPresenterMockRecorder struct {
	mock *MockProductPresenter
}

// NewMockProductPresenter creates a new mock instance.
func NewMockProductPresenter(ctrl *gomock.Controller) *MockProductPresenter {
	mock := &MockProductPresenter{ctrl: ctrl}
	mock.recorder = &MockProductPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductPresenter) EXPECT() *MockProductPresenterMockRecorder {
	return m.recorder
}

// ToOutput mocks base method.
func (m *MockProductPresenter) ToOutput(product *entity.Product) *usecase.ProductOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToOutput", product)
	ret0, _ := ret[0].(*usecase.ProductOutput)
	return ret0
}

// ToOutput indicates an expected call of ToOutput.
func (mr *MockProductPresenterMockRecorder) ToOutput(product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToOutput", reflect.TypeOf((*MockProductPresenter)(nil).ToOutput), product)
}

// ToPaginatedOutput mocks base method.
func (m *MockProductPresenter) ToPaginatedOutput(products []*entity.Product, total int64, page, limit int) *usecase.ListProductPaginatedOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToPaginatedOutput", products, total, page, limit)
	ret0, _ := ret[0].(*usecase.ListProductPaginatedOutput)
	return ret0
}

// ToPaginatedOutput indicates an expected call of ToPaginatedOutput.
func (mr *MockProductPresenterMockRecorder) ToPaginatedOutput(products, total, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToPaginatedOutput", reflect.TypeOf((*MockProductPresenter)(nil).ToPaginatedOutput), products, total, page, limit)
}

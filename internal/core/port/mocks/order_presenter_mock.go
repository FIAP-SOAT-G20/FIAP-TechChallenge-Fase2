// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/order_presenter_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/order_presenter_port.go -destination=internal/core/port/mocks/order_presenter_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	dto "github.com/FIAP-SOAT-G20/FIAP-TechChallenge-Fase2/internal/adapter/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderPresenter is a mock of OrderPresenter interface.
type MockOrderPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockOrderPresenterMockRecorder
	isgomock struct{}
}

// MockOrderPresenterMockRecorder is the mock recorder for MockOrderPresenter.
type MockOrderPresenterMockRecorder struct {
	mock *MockOrderPresenter
}

// NewMockOrderPresenter creates a new mock instance.
func NewMockOrderPresenter(ctrl *gomock.Controller) *MockOrderPresenter {
	mock := &MockOrderPresenter{ctrl: ctrl}
	mock.recorder = &MockOrderPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderPresenter) EXPECT() *MockOrderPresenterMockRecorder {
	return m.recorder
}

// Present mocks base method.
func (m *MockOrderPresenter) Present(pp dto.OrderPresenterInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Present", pp)
}

// Present indicates an expected call of Present.
func (mr *MockOrderPresenterMockRecorder) Present(pp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Present", reflect.TypeOf((*MockOrderPresenter)(nil).Present), pp)
}

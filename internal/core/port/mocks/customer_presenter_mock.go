// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/customer_presenter_port.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/customer_presenter_port.go -destination=internal/core/port/mocks/customer_presenter_mock.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	dto "github.com/FIAP-SOAT-G20/FIAP-TechChallenge-Fase2/internal/adapter/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomerPresenter is a mock of CustomerPresenter interface.
type MockCustomerPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerPresenterMockRecorder
	isgomock struct{}
}

// MockCustomerPresenterMockRecorder is the mock recorder for MockCustomerPresenter.
type MockCustomerPresenterMockRecorder struct {
	mock *MockCustomerPresenter
}

// NewMockCustomerPresenter creates a new mock instance.
func NewMockCustomerPresenter(ctrl *gomock.Controller) *MockCustomerPresenter {
	mock := &MockCustomerPresenter{ctrl: ctrl}
	mock.recorder = &MockCustomerPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerPresenter) EXPECT() *MockCustomerPresenterMockRecorder {
	return m.recorder
}

// Present mocks base method.
func (m *MockCustomerPresenter) Present(pp dto.CustomerPresenterInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Present", pp)
}

// Present indicates an expected call of Present.
func (mr *MockCustomerPresenterMockRecorder) Present(pp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Present", reflect.TypeOf((*MockCustomerPresenter)(nil).Present), pp)
}

definitions:
  handler.ProductRequest:
    properties:
      category_id:
        example: 1
        type: integer
      description:
        example: Descrição do Produto A
        maxLength: 500
        type: string
      name:
        example: Produto A
        maxLength: 100
        minLength: 3
        type: string
      price:
        example: 99.99
        type: number
    required:
    - category_id
    - name
    - price
    type: object
  middleware.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  presenter.ProductJsonPaginatedResponse:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      products:
        items:
          $ref: '#/definitions/presenter.ProductJsonResponse'
        type: array
      total:
        example: 100
        type: integer
    type: object
  presenter.ProductJsonResponse:
    properties:
      category_id:
        example: 1
        type: integer
      created_at:
        example: "2024-02-09T10:00:00Z"
        type: string
      description:
        example: Descrição do Produto A
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Produto A
        type: string
      price:
        example: 99.99
        type: number
      updated_at:
        example: "2024-02-09T10:00:00Z"
        type: string
    type: object
externalDocs:
  description: GitHub Repository
  url: https://github.com/FIAP-SOAT-G20/FIAP-TechChallenge-Fase2
info:
  contact: {}
  description: '### API de um Fast Food para o Tech Challenge da FIAP - Fase 2 - 10SOAT
    - G18'
  title: FIAP Tech Challenge Fase 2 - 10SOAT - G18
  version: "1"
paths:
  /products:
    get:
      consumes:
      - application/json
      description: List all products
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by category ID
        in: query
        name: category_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.ProductJsonPaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a new product
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handler.ProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presenter.ProductJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create product
      tags:
      - products
  /products/{id}:
    delete:
      description: Deletes a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Search for a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.ProductJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handler.ProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.ProductJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Update product
      tags:
      - products
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the access token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

basePath: /api/v1
definitions:
  handler.CreateCustomerBodyRequest:
    properties:
      cpf:
        example: 123.456.789-00
        type: string
      email:
        example: test.customer.1@email.com
        type: string
      name:
        example: Produto A
        maxLength: 100
        minLength: 3
        type: string
    required:
    - cpf
    - email
    - name
    type: object
  handler.CreateOrderBodyRequest:
    properties:
      customer_id:
        example: 1
        type: integer
    required:
    - customer_id
    type: object
  handler.CreateOrderProductBodyRequest:
    properties:
      quantity:
        example: 1
        type: integer
    required:
    - quantity
    type: object
  handler.CreateProductRequest:
    properties:
      category_id:
        example: 1
        type: integer
      description:
        example: Product A description
        maxLength: 500
        type: string
      name:
        example: Product A
        maxLength: 100
        minLength: 3
        type: string
      price:
        example: 99.99
        type: number
    required:
    - category_id
    - name
    - price
    type: object
  handler.StaffRequest:
    properties:
      name:
        example: Nome do funcionario
        maxLength: 100
        minLength: 3
        type: string
      role:
        example: Cargo do funcionario
        maxLength: 500
        type: string
    required:
    - name
    type: object
  handler.UpdateCustomerBodyRequest:
    properties:
      email:
        example: test.customer.1@email.com
        type: string
      name:
        example: Produto A
        maxLength: 100
        minLength: 3
        type: string
    required:
    - email
    - name
    type: object
  handler.UpdateOrderBodyRequest:
    properties:
      customer_id:
        example: 1
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/valueobject.OrderStatus'
        example: PENDING
    required:
    - customer_id
    - status
    type: object
  handler.UpdateOrderPartilRequest:
    properties:
      status:
        allOf:
        - $ref: '#/definitions/valueobject.OrderStatus'
        example: PENDING
    type: object
  handler.UpdateOrderProductBodyRequest:
    properties:
      quantity:
        example: 1
        type: integer
    required:
    - quantity
    type: object
  handler.UpdateProductRequest:
    properties:
      category_id:
        example: 1
        type: integer
      description:
        example: Product A description
        maxLength: 500
        type: string
      name:
        example: Product A
        maxLength: 100
        minLength: 3
        type: string
      price:
        example: 99.99
        type: number
    required:
    - category_id
    - name
    - price
    type: object
  middleware.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Bad Request
        type: string
    type: object
  presenter.CustomerJsonPaginatedResponse:
    properties:
      customers:
        items:
          $ref: '#/definitions/presenter.CustomerJsonResponse'
        type: array
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    type: object
  presenter.CustomerJsonResponse:
    properties:
      cpf:
        example: 123.456.789-00
        type: string
      created_at:
        example: "2024-02-09T10:00:00Z"
        type: string
      email:
        example: john.doe@email.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      updated_at:
        example: "2024-02-09T10:00:00Z"
        type: string
    type: object
  presenter.OrderJsonPaginatedResponse:
    properties:
      limit:
        example: 10
        type: integer
      orders:
        items:
          $ref: '#/definitions/presenter.OrderJsonResponse'
        type: array
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    type: object
  presenter.OrderJsonResponse:
    properties:
      created_at:
        example: "2024-02-09T10:00:00Z"
        type: string
      customer:
        $ref: '#/definitions/presenter.CustomerJsonResponse'
      customer_id:
        example: 1
        type: integer
      id:
        type: integer
      products:
        items:
          $ref: '#/definitions/presenter.ProductsJsonResponse'
        type: array
      status:
        example: PENDING
        type: string
      total_bill:
        example: "100.00"
        type: string
      updated_at:
        example: "2024-02-09T10:00:00Z"
        type: string
    type: object
  presenter.OrderProductJsonPaginatedResponse:
    properties:
      limit:
        example: 10
        type: integer
      order_products:
        items:
          $ref: '#/definitions/presenter.OrderProductJsonResponse'
        type: array
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
    type: object
  presenter.OrderProductJsonResponse:
    properties:
      created_at:
        example: "2024-02-09T10:00:00Z"
        type: string
      order:
        $ref: '#/definitions/presenter.OrderJsonResponse'
      order_id:
        type: integer
      product:
        $ref: '#/definitions/presenter.ProductJsonResponse'
      product_id:
        type: integer
      quantity:
        type: integer
      updated_at:
        example: "2024-02-09T10:00:00Z"
        type: string
    type: object
  presenter.ProductJsonPaginatedResponse:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      products:
        items:
          $ref: '#/definitions/presenter.ProductJsonResponse'
        type: array
      total:
        example: 100
        type: integer
    type: object
  presenter.ProductJsonResponse:
    properties:
      category_id:
        example: 1
        type: integer
      created_at:
        example: "2024-02-09T10:00:00Z"
        type: string
      description:
        example: Description of product A
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Product A
        type: string
      price:
        example: 99.99
        type: number
      updated_at:
        example: "2024-02-09T10:00:00Z"
        type: string
    type: object
  presenter.ProductsJsonResponse:
    properties:
      category_id:
        example: 1
        type: integer
      created_at:
        example: "2024-02-09T10:00:00Z"
        type: string
      description:
        example: Description of product A
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Product A
        type: string
      price:
        example: 99.99
        type: number
      quantity:
        type: integer
      updated_at:
        example: "2024-02-09T10:00:00Z"
        type: string
    type: object
  presenter.StaffJsonPaginatedResponse:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      staffs:
        items:
          $ref: '#/definitions/presenter.StaffJsonResponse'
        type: array
      total:
        example: 100
        type: integer
    type: object
  presenter.StaffJsonResponse:
    properties:
      created_at:
        example: "2024-02-09T10:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      role:
        example: COOK, ATTENDANT or MANAGER
        type: string
      updated_at:
        example: "2024-02-09T10:00:00Z"
        type: string
    type: object
  response.HealthCheckResponse:
    properties:
      checks:
        additionalProperties:
          $ref: '#/definitions/response.HealthCheckVerifications'
        type: object
      status:
        $ref: '#/definitions/response.HealthCheckStatus'
    type: object
  response.HealthCheckStatus:
    enum:
    - pass
    - warn
    - fail
    type: string
    x-enum-varnames:
    - HealthCheckStatusPass
    - HealthCheckStatusWarn
    - HealthCheckStatusFail
  response.HealthCheckVerifications:
    properties:
      componentId:
        type: string
      status:
        $ref: '#/definitions/response.HealthCheckStatus'
      time:
        type: string
    type: object
  valueobject.OrderStatus:
    enum:
    - UNDEFINDED
    - OPEN
    - CANCELLED
    - PENDING
    - RECEIVED
    - PREPARING
    - READY
    - COMPLETED
    type: string
    x-enum-varnames:
    - UNDEFINDED
    - OPEN
    - CANCELLED
    - PENDING
    - RECEIVED
    - PREPARING
    - READY
    - COMPLETED
externalDocs:
  description: GitHub Repository
  url: https://github.com/FIAP-SOAT-G20/FIAP-TechChallenge-Fase2
host: localhost:8080
info:
  contact: {}
  description: '### API de um Fast Food para o Tech Challenge da FIAP - Fase 2'
  title: FIAP Tech Challenge Fase 2 - 10SOAT - G18
  version: "1"
paths:
  /api/v1/orders/products:
    get:
      consumes:
      - application/json
      description: List all orders
      parameters:
      - description: Filter by order ID
        in: query
        name: order_id
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.OrderProductJsonPaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: List orders
      tags:
      - orders
  /api/v1/orders/products/{order_id}/{product_id}:
    delete:
      description: Deletes a orderProduct by Order ID and Product ID
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Delete orderProduct
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Get an order product
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.OrderProductJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get an order product
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create an order product
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: OrderProduct data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/handler.CreateOrderProductBodyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presenter.OrderProductJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create an order product
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: Update an existing order
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: integer
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: integer
      - description: OrderProduct data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateOrderProductBodyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.OrderProductJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Update order
      tags:
      - orders
  /customers:
    get:
      consumes:
      - application/json
      description: List all customers
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.CustomerJsonPaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: List customers
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Creates a new customer
      parameters:
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/handler.CreateCustomerBodyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presenter.CustomerJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create customer
      tags:
      - customers
      - sign-up
  /customers/{id}:
    delete:
      description: Deletes a customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Delete customer
      tags:
      - customers
    get:
      consumes:
      - application/json
      description: Search for a customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.CustomerJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get customer
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Update an existing customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Customer data
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateCustomerBodyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.CustomerJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Update customer
      tags:
      - customers
  /health:
    get:
      description: Checks application health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.HealthCheckResponse'
        "500":
          description: Internal server error
          schema:
            type: string
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/response.HealthCheckResponse'
      summary: Application HealthCheck
      tags:
      - healthcheck
  /orders:
    get:
      consumes:
      - application/json
      description: List all orders
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by category ID
        in: query
        name: category_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.OrderJsonPaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: List orders
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Creates a new order
      parameters:
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/handler.CreateOrderBodyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presenter.OrderJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create order
      tags:
      - orders
  /orders/{id}:
    delete:
      description: Deletes a order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Delete order
      tags:
      - orders
    get:
      consumes:
      - application/json
      description: Search for a order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.OrderJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get order
      tags:
      - orders
    patch:
      consumes:
      - application/json
      description: |-
        Partially updates an existing order
        The status are: **OPEN**, **CANCELLED**, **PENDING**, **RECEIVED**, **PREPARING**, **READY**, **COMPLETED**
        ## Transition of status:
        - OPEN      -> CANCELLED || PENDING
        - CANCELLED -> {},
        - PENDING   -> OPEN || RECEIVED
        - RECEIVED  -> PREPARING
        - PREPARING -> READY
        - READY     -> COMPLETED
        - COMPLETED -> {}
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateOrderPartilRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.OrderJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Partial update order
      tags:
      - orders
    put:
      consumes:
      - application/json
      description: |-
        Update an existing order
        The status are: **OPEN**, **CANCELLED**, **PENDING**, **RECEIVED**, **PREPARING**, **READY**, **COMPLETED**
        ## Transition of status:
        - OPEN      -> CANCELLED || PENDING
        - CANCELLED -> {},
        - PENDING   -> OPEN || RECEIVED
        - RECEIVED  -> PREPARING
        - PREPARING -> READY
        - READY     -> COMPLETED
        - COMPLETED -> {}
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Order data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateOrderBodyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.OrderJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Update order
      tags:
      - orders
  /products:
    get:
      consumes:
      - application/json
      description: List all products
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by category ID
        in: query
        name: category_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.ProductJsonPaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: List products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Creates a new product
      parameters:
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handler.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presenter.ProductJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create product
      tags:
      - products
  /products/{id}:
    delete:
      description: Deletes a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Delete product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Search for a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.ProductJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get product
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update an existing product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.ProductJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Update product
      tags:
      - products
  /staffs:
    get:
      consumes:
      - application/json
      description: List all staffs
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: 'Filter by role. Available options: COOK, ATTENDANT, MANAGER'
        in: query
        name: role
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.StaffJsonPaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: List staffs
      tags:
      - staffs
    post:
      consumes:
      - application/json
      description: Creates a new staff
      parameters:
      - description: Staff data
        in: body
        name: staff
        required: true
        schema:
          $ref: '#/definitions/handler.StaffRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/presenter.StaffJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Create staff
      tags:
      - staffs
  /staffs/{id}:
    delete:
      description: Deletes a staff by ID
      parameters:
      - description: Staff ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Delete staff
      tags:
      - staffs
    get:
      consumes:
      - application/json
      description: Search for a staff by ID
      parameters:
      - description: Staff ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.StaffJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Get staff
      tags:
      - staffs
    put:
      consumes:
      - application/json
      description: Update an existing staff
      parameters:
      - description: Staff ID
        in: path
        name: id
        required: true
        type: integer
      - description: Staff data
        in: body
        name: staff
        required: true
        schema:
          $ref: '#/definitions/handler.StaffRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.StaffJsonResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/middleware.ErrorResponse'
      summary: Update staff
      tags:
      - staffs
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and the access token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Regiter a new customer or staff
  name: sign-up
- description: Sign in to the system
  name: sign-in
- description: List, create, update and delete customers
  name: customers
- description: List, create, update and delete products
  name: products
- description: List, create, update and delete orders
  name: orders
- description: Process payments
  name: payments
